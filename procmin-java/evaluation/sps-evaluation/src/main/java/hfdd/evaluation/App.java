/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hfdd.evaluation;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import de.rwth.processmining.tb.core.sps.algorithm.iteration.HFDDIterationManagementBuildingException;

public class App {
  public String getGreeting() {
    return "Hello World!";
  }

  public static final Path logL = Paths.get("C:/temp/dataset/Reimburse/log_blue.xes");
  public static final Path logR = Paths.get("C:/temp/dataset/Reimburse/log_red.xes");

  public static void main(String[] args)
      throws HFDDIterationManagementBuildingException, FileNotFoundException, IOException {
    App app = new App();
    System.out.println(app.getGreeting());
    System.out.println(System.getProperty("user.dir"));

    Properties propConfigJanus = app.readPropertiesFile("config-pva-on-cd-janus.properties");

    // Defined by the gradle task
    // Path janusJar = Paths.get("build/Janus.jar");

    List<String> cmds = List.of("java", 
        "-cp", propConfigJanus.getProperty("janusJar"), "minerful.JanusVariantAnalysisStarter",
        "--in-log-1-file", logL.toString(), 
        "--in-log-2-file", logR.toString(), 
        "-oCSV", "pva_decl_results.csv", 
        "-permutations", propConfigJanus.getProperty("permutations"),
        "-measure", propConfigJanus.getProperty("measure"),
        "-measureThreshold", propConfigJanus.getProperty("measureThreshold"),
        "-pValue", propConfigJanus.getProperty("pValue"),
        "-s", propConfigJanus.getProperty("s"),
        "-c", propConfigJanus.getProperty("c"),
        "-differenceThreshold", propConfigJanus.getProperty("differenceThreshold"),
        "-pValueAdjustment", propConfigJanus.getProperty("pValueAdjustment")
    );
    if (propConfigJanus.getProperty("simplify").toLowerCase().equals("true")) {
      cmds = new LinkedList<>(cmds);
      cmds.add("-simplify");
    }

    ProcessBuilder processBuilder = new ProcessBuilder(cmds);
    System.out.println(processBuilder.command());

    Process process = processBuilder.start();
    
    // for reading the output from stream
    BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));
    BufferedReader errInput = new BufferedReader(new InputStreamReader(process.getErrorStream()));
    String s = null;
    while ((s = errInput.readLine()) != null) {
      System.out.println(s);
    }
    while ((s = stdInput.readLine()) != null) {
      System.out.println(s);
    }
    
    try {
      process.waitFor();
    } catch (InterruptedException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
      System.out.println("!!!!!!!!!! Failed running janus !!!!!!!!!!");
    }
  }

  public Properties readPropertiesFile(String fileName) throws IOException {
    InputStream fis = null;
    Properties prop = null;
    try {
      fis = getClass().getClassLoader().getResourceAsStream(fileName);
      prop = new Properties();
      prop.load(fis);
    } catch (FileNotFoundException fnfe) {
      fnfe.printStackTrace();
    } catch (IOException ioe) {
      ioe.printStackTrace();
    } finally {
      fis.close();
    }
    return prop;
  }
}
